name: "Code analysis"

on:
  workflow_call:
    inputs:
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "22.04"
      architecture:
        required: false
        type: string
        default: "amd64"
      full-scan:
        required: false
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "22.04"
      architecture:
        required: false
        type: string
        default: "amd64"
      full-scan:
        required: false
        type: boolean
        default: false

jobs:
  build-docker-image:
    uses: ./.github/workflows/build-docker-artifact.yaml
    secrets: inherit
    with:
      distro: ${{ inputs.distro }}
      version: ${{ inputs.version }}
      architecture: ${{ inputs.architecture }}

  clang-tidy:
    name: 🤖 Clang Tidy
    needs: build-docker-image
    runs-on:
      - build
      - in-service
    container:
      image: ${{ needs.build-docker-image.outputs.ci-build-tag }}
      env:
        CCACHE_TEMPDIR: /tmp/ccache
        CARGO_HOME: /tmp/.cargo
        TT_FROM_PRECOMPILED_DIR: /work
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /home/ubuntu/.ccache-ci:/github/home/.ccache # HOME is hardcoded for no clear reason: https://github.com/actions/runner/issues/863
        - /mnt/MLPerf/ccache:/mnt/MLPerf/ccache
      # Group 1457 is for the shared ccache drive
      # tmpfs is for efficiency
      options: >
        --group-add 1457
        --tmpfs /tmp
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: Verify ccache availability
        run: |
          if [ ! -d "/mnt/MLPerf/ccache" ]; then
            echo "::error title=ccache-mlperf-not-mounted::NFS drive is not mounted; build machine not properly provisioned."
            exit 1
          fi
          if [ ! -d "$HOME/.ccache" ]; then
            echo "::error title=ccache-not-provisioned::Ccache is not properly provisioned."
            exit 1
          fi

      - name: Create ccache tmpdir
        run: |
          mkdir -p /tmp/ccache

      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive
          path: docker-job # Here be dragons; keep it scoped to our desired volume, yet must be under github.workspace and be sure to clean up at the end
          clean: true

      - name: Determine merge base
        if: github.ref_name != 'main' && !inputs.full-scan
        run: |
          echo "Current branch: ${{ github.ref_name }}"
          MERGE_BASE=$(git merge-base ${{ github.ref_name }} origin/main)
          echo "Merge base between ${{ github.ref_name }} and main: $MERGE_BASE"
          echo "MERGE_BASE=$MERGE_BASE" >> $GITHUB_ENV

      - name: Check out baseline
        if: github.ref_name != 'main' && !inputs.full-scan
        uses: actions/checkout@v4
        with:
          ref: ${{ env.MERGE_BASE }}
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive
          path: docker-job # Here be dragons; keep it scoped to our desired volume, yet must be under github.workspace and be sure to clean up at the end
          clean: true

      - name: Create shim
        run: |
          # Suppress clang-tidy to first get an up-to-date build tree
          ln -sf /usr/bin/true ./clang-tidy-shim

      - name: 🔧 CMake configure
        run: |
          cmake --preset clang-tidy -DCMAKE_CXX_CLANG_TIDY="$(pwd)/clang-tidy-shim;--warnings-as-errors=*" -DCMAKE_C_CLANG_TIDY="$(pwd)/clang-tidy-shim;--warnings-as-errors=*"

      - name: Prepare baseline ccache summary
        if: github.ref_name != 'main' && !inputs.full-scan
        run: |
          # Zero out the stats so we can see how we did this build
          # NOTE: may be inaccurate if we have >1 build runner on the same machine, using the same local cache
          ccache -z

      - name: 🛠️ Baseline Build
        if: github.ref_name != 'main' && !inputs.full-scan
        run: |
          nice -n 19 cmake --build --preset clang-tidy

      - name: Publish Ccache summary
        if: github.ref_name != 'main' && !inputs.full-scan
        run: |
          echo '## CCache Summary' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ccache -s >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive
          path: docker-job # Here be dragons; keep it scoped to our desired volume, yet must be under github.workspace and be sure to clean up at the end
          clean: false

      - name: Restore shim
        run: |
          # Restore shim to legit clang-tidy
          # Symlink tomfoolery here so that Ninja believes the build command has not changed from the previous run
          ln -sf $(which clang-tidy-17) ./clang-tidy-shim

      - name: Prepare ccache summary
        run: |
          # Zero out the stats so we can see how we did this build
          # NOTE: may be inaccurate if we have >1 build runner on the same machine, using the same local cache
          ccache -z

      - name: 🔍 Analyze code with clang-tidy
        run: |
          nice -n 19 cmake --build --preset clang-tidy

      - name: Publish Ccache summary
        run: |
          echo '## CCache Summary' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ccache -s >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          # We are forced to checkout the repo into a subdir of the host's workdir; this pollutes the host
          # with root-owned files.  Be sure to clean up after ourselves in case we're on a non-ephemeral runner.
          echo "pre rm"
          ls -al /__w/tt-metal/tt-metal
          rm -rf /__w/tt-metal/tt-metal/docker-job
          echo "post rm"
          ls -al /__w/tt-metal/tt-metal
