name: "Build tt-metal docker artifact"

on:
  workflow_call:
    inputs:
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "20.04"
      architecture:
        required: false
        type: string
        default: "amd64"
    outputs:
      ci-build-tag:
        description: "Docker tag for the CI Build Docker image for building TT-Metalium et al"
        value: ${{ jobs.check-docker-images.outputs.ci-build-tag }}
      ci-test-tag:
        description: "Docker tag for the CI Test Docker image for testing TT-Metalium et al"
        value: ${{ jobs.check-docker-images.outputs.ci-test-tag }}
  workflow_dispatch:
    inputs:
      distro:
        required: false
        type: choice
        default: "ubuntu"
        options:
            - "ubuntu"
      version:
        required: false
        type: choice
        default: "20.04"
        options:
            - "20.04"
            - "22.04"
            - "24.04"
      architecture:
        required: false
        type: choice
        default: "amd64"
        options:
            - "amd64"
jobs:
  check-docker-images:
    runs-on: ubuntu-latest
    env:
      OS: ubuntu-22.04
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true
    outputs:
      ci-build-exists: ${{ steps.images.outputs.ci-build-exists }}
      ci-build-tag: ${{ steps.tags.outputs.ci-build-tag }}
      ci-test-exists: ${{ steps.images.outputs.ci-test-exists }}
      ci-test-tag: ${{ steps.tags.outputs.ci-test-tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Compute tags
        id: tags
        run: |
          BUILD_TAG=$(cat scripts/docker/requirements_dev.txt pyproject.toml | sha1sum | cut -d' ' -f1)
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          # FIXME!  echo "ci-build-tag=${BUILD_TAG}" >> $GITHUB_OUTPUT
          echo "ci-build-tag=ghcr.io/${{ github.repository }}/tt-metalium/${{ env.OS }}-amd64:dev-afuller-tests-shift-left" >> $GITHUB_OUTPUT
          TEST_TAG=$(cat tt_metal/python_env/requirements-dev.txt pyproject.toml | sha1sum | cut -d' ' -f1)
          echo "TEST_TAG=$TEST_TAG" >> $GITHUB_ENV
          echo "ci-test-tag=${TEST_TAG}" >> $GITHUB_OUTPUT

      - name: Query images exist
        id: images
        run: |
          BUILD_IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" ghcr.io/tenstorrent/tt-metal/tt-metalium/${{ env.OS }}-amd64:${{ env.BUILD_TAG }})
          if [ "$BUILD_IMAGE_EXISTS" == "200" ]; then
            # echo "ci-build-exists=true" >> $GITHUB_OUTPUT
            echo "no-op"
          else
            # echo "ci-build-exists=false" >> $GITHUB_OUTPUT
            echo "no-op"
          fi
          # FIXME!
          echo "ci-build-exists=true" >> $GITHUB_OUTPUT

          TEST_IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" ghcr.io/tenstorrent/tt-metal/tt-metalium/${{ env.OS }}-amd64:${{ env.TEST_TAG }})
          if [ "$TEST_IMAGE_EXISTS" == "200" ]; then
            echo "ci-test-exists=true" >> $GITHUB_OUTPUT
          else
            echo "ci-test-exists=false" >> $GITHUB_OUTPUT
          fi

  build-docker-image:
    name: "üê≥Ô∏è Build ${{ inputs.distro }} ${{inputs.version }} image"
    needs: check-docker-images
    if: needs.check-docker-images.outputs.ci-build-exists != 'true'
    timeout-minutes: 30
    env:
      CONFIG: ci
      SILENT: 0
      VERBOSE: 1
      IMAGE_PARAMS: "${{ inputs.distro }}-${{ inputs.version }}-${{ inputs.architecture }}"
      IMAGE: tt-metalium/ubuntu-20.04-amd64
      DOCKERFILE: ubuntu-20.04-amd64
    runs-on:
      - build-docker
      - in-service
    steps:
      - name: debug
        run: |
          set -x
          echo "ci-build-exists=${{ needs.check-docker-images.outputs.ci-build-exists }}"
          echo "ci-build-tag=${{ needs.check-docker-images.outputs.ci-build-tag }}"
          echo "ci-test-exists=${{ needs.check-docker-images.outputs.ci-test-exists }}"
          echo "ci-test-tag=${{ needs.check-docker-images.outputs.ci-test-tag }}"
      - uses: tenstorrent/tt-metal/.github/actions/checkout-with-submodule-lfs@main
        with:
          fetch-depth: 0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get all test, doc and src files that have changed
        id: changed-files-specific
        uses: tj-actions/changed-files@v45
        with:
          files: |
              dockerfile/**.Dockerfile
              scripts/docker/install_test_deps.sh
              scripts/docker/requirements*
              pyproject.toml
              tt_metal/python_env/requirements-dev.txt
          base_sha: 'main'
      - name: Determine docker image tag
        uses: ./.github/actions/generate-docker-tag
        with:
          image: tt-metalium/${{ env.IMAGE_PARAMS }}
      - name: Build Docker image and push to GHCR
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: dockerfile/${{ env.IMAGE_PARAMS }}.Dockerfile
          push: true
          tags: ${{ env.TT_METAL_DOCKER_IMAGE_TAG}}
          build-args: UBUNTU_VERSION=${{ inputs.version }}
          cache-from: type=registry,ref=${{ env.TT_METAL_REF_IMAGE_TAG }}
          cache-to: type=inline
          pull: true
      - name: Tag Docker main image as current image
        if: steps.changed-files-specific.outputs.any_changed != 'true'
        run: |
          docker pull ghcr.io/${{ github.repository }}/tt-metalium/${{ env.IMAGE_PARAMS }}:latest
          docker tag ghcr.io/${{ github.repository }}/tt-metalium/${{ env.IMAGE_PARAMS }}:latest ${{ env.TT_METAL_DOCKER_IMAGE_TAG}}
      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ${{ env.TT_METAL_DOCKER_IMAGE_TAG }}
